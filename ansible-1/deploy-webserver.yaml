---
- name: Demo playbook
  hosts: myserver
  become: yes
  become_method: sudo
  tasks:
    - name: Install nginx
      apt:
        name: nginx
        state: latest
        
    - name: Start nginx service
      service:
        name: nginx
        enabled: true
        state: started
    
    - name: Expose port 3000 with iptables
      shell: 
        "sudo iptables -I INPUT -p tcp -m tcp --dport 3000 -j ACCEPT"
    
    - name: Install nodejs and npm
      apt:
        name: 
          - nodejs
          - npm
        state: latest
    
    - name: Install pm2
      npm:
        name: pm2
        global: yes
    
    - name: Copy nodejs app files
      copy:
        src: /ws4/node-app/
        dest: /var/www/node-app

    - name: Copy db file
      copy:
        src: /ws4/db.sql
        dest: /
    
    - name: Install npm packages
      npm:
        path: /var/www/node-app
    
    - name: Install MySQL server
      apt:
        name: 
          - mysql-server
          - libmysqlclient-dev
          - python3-pip
        state: latest
    
    - name: Install mysqlclient using pip
      pip:
        name: mysqlclient
    
    - name: Start MySQL service
      service:
        name: mysql
        state: started
        enabled: yes
    
    - name: Create a MySQL database
      mysql_db:
        name: sample_db
        state: present
      become: yes
    
    - name: Create a MySQL user
      mysql_user:
        name: "{{ lookup('env', 'DB_USER') }}"
        password: "{{ lookup('env', 'DB_PASSWORD') }}"
        priv: 'sample_db.*:ALL'
        state: present
      become: yes
    
    - name: Create MySQL table using SQL script
      shell: "mysql -u {{ lookup('env', 'DB_USER') }} -p'{{ lookup('env', 'DB_PASSWORD') }}' sample_db < /db.sql"
      become: yes

    - name: Run nodejs app on port 3000
      command: "pm2 start /var/www/node-app/app.js --name node-app -f"
    
    - name: Wait to be responsive
      wait_for:
        port: 3000
        delay: 10
        timeout: 60
    
    - name: Test app
      uri:
        url: http://localhost:3000/
        status_code: 200
      register: result
      until: result.status == 200
      retries: 3
      delay: 10